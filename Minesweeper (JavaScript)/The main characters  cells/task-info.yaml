type: edu
custom_name: "The main characters: cells."
files:
  - name: src/App.css
    visible: true
    text: |
      .App {
        text-align: center;
      }
      
      .App-logo {
        height: 40vmin;
        pointer-events: none;
      }
      
      @media (prefers-reduced-motion: no-preference) {
        .App-logo {
          animation: App-logo-spin infinite 20s linear;
        }
      }
      
      .App-header {
        background-color: #282c34;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        font-size: calc(10px + 2vmin);
        color: white;
      }
      
      .App-link {
        color: #61dafb;
      }
      
      @keyframes App-logo-spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }
    learner_created: false
  - name: src/App.js
    visible: true
    text: |
      import React from 'react';
      import logo from './logo.svg';
      import './App.css';
      
      function App() {
        return (
          <div className="App">
            <header className="App-header">
              <img src={logo} className="App-logo" alt="logo" />
              <p>
                Edit <code>src/App.js</code> and save to reload.
              </p>
              <a
                className="App-link"
                href="https://reactjs.org"
                target="_blank"
                rel="noopener noreferrer"
              >
                I don't know will it pass
              </a>
            </header>
          </div>
        );
      }
      
      export default App;
    learner_created: false
  - name: src/index.css
    visible: true
    text: |
      body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
          'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
          sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      code {
        font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
          monospace;
      }
    learner_created: false
  - name: src/index.js
    visible: true
    text: |
      import React from 'react';
      import ReactDOM from 'react-dom';
      import './index.css';
      import App from './App';
      
      ReactDOM.render(
        <React.StrictMode>
          <App />
        </React.StrictMode>,
        document.getElementById('root')
      );
    learner_created: false
  - name: src/logo.svg
    visible: true
    text: |
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
          <g fill="#61DAFB">
              <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
              <circle cx="420.9" cy="296.5" r="45.7"/>
              <path d="M520.5 78.1z"/>
          </g>
      </svg>
    learner_created: false
  - name: test/test.js
    visible: false
    text: |+
      const puppeteer = require('puppeteer');
      const path = require('path');
      // '..' since we're in the test/ subdirectory; learner is supposed to have src3/index.html
      // const pagePath = 'file://' + path.resolve(__dirname, '../src3/index.html');
      
      const hs = require('hs-test-web');
      const react = require("hs-test-web-server");
      
      const sleep = (ms) => new Promise(res => setTimeout(res, ms));
      
      async function stageTest() {
          const browser = await puppeteer.launch({
              headless: false,
              defaultViewport: null,
              args:['--start-maximized', '--disable-infobar'],
              ignoreDefaultArgs: ['--enable-automation'],
          });
      
          const page = await browser.newPage();
          await page.goto('http://localhost:31328');
      
          page.on('console', msg => console.log(msg.text()));
      
          let result = await hs.testPage(page,
              () => {
                  function eventFire(e, type) {
                      let event = document.createEvent('Event');
                      event.initEvent(type, true, false);
                      e.dispatchEvent(event);
                  }
      
                  let isPresent = {
                      flagCounter: false,
                      resetBtn: false,
                      clock: false
                  };
      
                  let divs = new Map();
                  let pointerClasses = new Map();
      
                  Array.from(document.getElementsByTagName("*")).forEach( element => {
                      if (element.children.length > 1 ||
                          element.tagName === "SCRIPT" ||
                          element.tagName === "LINK" ||
                          element.tagName === "META" ||
                          element.tagName === "STYLE" ||
                          element.tagName === "NOSCRIPT" ) return;
      
                      let text = element.innerText;
      
                      if(text.includes('10'))
                          isPresent.flagCounter = true;
                      if(text.includes('0:00'))
                          isPresent.clock = true;
                      if (text === '') {
      
                          let width = window.getComputedStyle(element).width;
                          let height = window.getComputedStyle(element).height;
                          let divName = element.className;
      
                          if (width === height)
                              divs.has(divName) ?
                                  divs.set(divName, divs.get(divName)+1) :
                                  divs.set(divName, 1)
                      }
      
                      if (window.getComputedStyle(element).cursor === "pointer") {
                          let [tag, className] = [element.tagName ,element.className];
      
                          pointerClasses.has((tag, className)) ?
                              pointerClasses.set((tag, className), pointerClasses.get((tag, className)) + 1) :
                              pointerClasses.set((tag, className), 1);
                      }
                  });
      
                  if (!isPresent.flagCounter) {
                      return hs.wrong("There should be a flag counter that equals to '10'.")
                  }
                  if (pointerClasses.length === 0) {
                      return hs.wrong("There should be a reset button and if you hover the mouse over it, the cursor should change to the pointer.")
                  }
                  if (!isPresent.clock) {
                      return hs.wrong("There should be a timer that equals to '0:00'.")
                  }
                  //------------------------------------------------------------------------------------------------------
      
                  divs = Array.from(divs);
                  let cellClass = divs.find(([k, v]) => v === 72);
                  if (!cellClass) {
                      return hs.wrong("The field should contain 72 square cells with no inner elements inside.")
                  }
      
                  //------------------------------------------------------------------------------------------------------
      
                  let cells = Array.from(document.getElementsByClassName("cell"));
      
                  if (cells.length === 0) {
                      return hs.wrong("Cells should have className='cell'");
                  }
      
                  let rows = new Map();
                  let columns = new Map();
                  cells.forEach(cell => {
                      let top = cell.getBoundingClientRect().top;
                      let left = cell.getBoundingClientRect().left;
      
                      rows.has(top) ?
                          rows.set(top, rows.get(top)+1) :
                          rows.set(top, 1);
      
                      columns.has(left) ?
                          columns.set(left, columns.get(left)+1) :
                          columns.set(left, 1)
                  });
      
                  rows = Array.from(rows);
                  let isWrongRow = rows.find( ([k, v]) => v !== 8);
                  if (isWrongRow) return hs.wrong("Each row of the field should contain 8 cells.");
      
                  columns = Array.from(columns);
                  let isWrongColumn = columns.find( ([k, v]) => v !== 9);
                  if (isWrongColumn) return hs.wrong("Each column of the field should contain 9 cells.")
      
                  //------------------------------------------------------------------------------------------------------
      
                  let result = true;
                  let arr = [1,2,3];
                  arr.forEach( (i, ind) => {
                      let cell = document.getElementsByClassName("cell")[i];
      
                      let border = window.getComputedStyle(cell).border;
                      let outline = window.getComputedStyle(cell).outline;
                      let backgroundColor = window.getComputedStyle(cell).backgroundColor;
      
                      eventFire(cell,'click');
                      let newOutline = window.getComputedStyle(cell).outline;
                      let newBorder = window.getComputedStyle(cell).border;
                      let newBackgroundColor = window.getComputedStyle(cell).backgroundColor;
                      if (outline === newOutline &&
                          border === newBorder &&
                          backgroundColor === newBackgroundColor) {
                          result = false
                      }
                  });
                  if(!result) return hs.wrong("The opened cell should look different");
      
                  arr = [4,5,6];
                  arr.forEach( (i, ind) => {
                      let cell = document.getElementsByClassName("cell")[i];
      
                      eventFire(cell,'contextmenu');
                      let backgroundImage = window.getComputedStyle(cell).backgroundImage;
                      if (cell.children.length === 0 &&
                          backgroundImage === "none" ) {
                          result = false
                      }
                  });
                  if(!result) return hs.wrong("The flagged cell should look different.");
      
                  return hs.correct();
              }
          );
      
          await sleep(3000);
      
          await browser.close();
          return result;
      
      
      }
      
      it('Test stage', async function () {
      
          try {
              this.timeout(30000)
          } catch (ignored) {
          }
      
          let result = await react.startServerAndTest(
              'localhost', 31328, path.resolve(__dirname, '..'), stageTest
          );
      
          if (result['type'] === 'wrong') {
              throw new Error(result['message']);
          }
      }, 30000)
    
    learner_created: false
feedback_link: https://hyperskill.org/projects/108/stages/588/implement#comment
status: Unchecked
record: -1
